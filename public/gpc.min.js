(function(){var gpcas=gpcas||{};gpcas.util={};gpcas.geometry={};function equals(x1,x){var p;for(p in x1){if(typeof x[p]=="undefined"){return false}}for(p in x1){if(x1[p]){switch(typeof x1[p]){case"object":if(!equals(x1[p],x[p])){return false}break;case"function":if(typeof x[p]=="undefined"||p!="equals"&&x1[p].toString()!=x[p].toString())return false;break;default:if(x1[p]!=x[p]){return false}}}else{if(x[p])return false}}for(p in x){if(typeof x1[p]=="undefined"){return false}}return true}var Point=function(x,y){this.x=x;this.y=y};gpcas.util.ArrayHelper=function(){};var static=gpcas.util.ArrayHelper;static.create2DArray=function(x,y){var a=[];for(var i=0;i<x;i++){a[i]=[]}return a};static.valueEqual=function(obj1,obj2){if(obj1==obj2)return true;if(equals(obj1,obj2))return true;return false};static.sortPointsClockwise=function(vertices){var isArrayList=false;if(vertices instanceof gpcas.util.ArrayList){vertices=vertices.toArray();isArrayList=true}var maxTop=null;var maxBottom=null;var maxLeft=null;var maxRight=null;var maxLeftIndex;var newVertices=vertices;for(var i=0;i<vertices.length;i++){var vertex=vertices[i];if(maxTop==null||maxTop.y>vertex.y||maxTop.y==vertex.y&&vertex.x<maxTop.x){maxTop=vertex}if(maxBottom==null||maxBottom.y<vertex.y||maxBottom.y==vertex.y&&vertex.x>maxBottom.x){maxBottom=vertex}if(maxLeft==null||maxLeft.x>vertex.x||maxLeft.x==vertex.x&&vertex.y>maxLeft.y){maxLeft=vertex;maxLeftIndex=i}if(maxRight==null||maxRight.x<vertex.x||maxRight.x==vertex.x&&vertex.y<maxRight.y){maxRight=vertex}}if(maxLeftIndex>0){newVertices=[];var j=0;for(var i=maxLeftIndex;i<vertices.length;i++){newVertices[j++]=vertices[i]}for(var i=0;i<maxLeftIndex;i++){newVertices[j++]=vertices[i]}vertices=newVertices}var reverse=false;for(var i=0;i<vertices.length;i++){var vertex=vertices[i];if(equals(vertex,maxBottom)){reverse=true;break}else if(equals(vertex,maxTop)){break}}if(reverse){newVertices=[];newVertices[0]=vertices[0];var j=1;for(var i=vertices.length-1;i>0;i--){newVertices[j++]=vertices[i]}vertices=newVertices}return isArrayList?new gpcas.util.ArrayList(vertices):vertices};var ArrayHelper=gpcas.util.ArrayHelper;gpcas.util.ArrayList=function(arr){this._array=[];if(arr!=null){this._array=arr}};var p=gpcas.util.ArrayList.prototype;p.add=function(value){this._array.push(value)};p.get=function(index){return this._array[index]};p.size=function(){return this._array.length};p.clear=function(){this._array=[]};p.equals=function(list){if(this._array.length!=list.size())return false;for(var i=0;i<this._array.length;i++){var obj1=this._array[i];var obj2=list.get(i);if(!ArrayHelper.valueEqual(obj1,obj2)){return false}}return true};p.hashCode=function(){return 0};p.isEmpty=function(){return this._array.length==0};p.toArray=function(){return this._array};gpcas.geometry.Clip=function(){};gpcas.geometry.Clip.DEBUG=false;gpcas.geometry.Clip.GPC_EPSILON=2220446049250313e-31;gpcas.geometry.Clip.GPC_VERSION="2.31";gpcas.geometry.Clip.LEFT=0;gpcas.geometry.Clip.RIGHT=1;gpcas.geometry.Clip.ABOVE=0;gpcas.geometry.Clip.BELOW=1;gpcas.geometry.Clip.CLIP=0;gpcas.geometry.Clip.SUBJ=1;var p=gpcas.geometry.Clip.prototype;var static=gpcas.geometry.Clip;static.intersection=function(p1,p2,polyClass){if(polyClass==null||polyClass==undefined){polyClass="PolyDefault"}return Clip.clip(OperationType.GPC_INT,p1,p2,polyClass)};static.union=function(p1,p2,polyClass){if(polyClass==null||polyClass==undefined){polyClass="PolyDefault"}return Clip.clip(OperationType.GPC_UNION,p1,p2,polyClass)};static.xor=function(p1,p2,polyClass){if(polyClass==null||polyClass==undefined){polyClass="PolyDefault"}return Clip.clip(OperationType.GPC_XOR,p1,p2,polyClass)};static.difference=function(p1,p2,polyClass){if(polyClass==null||polyClass==undefined){polyClass="PolyDefault"}return Clip.clip(OperationType.GPC_DIFF,p2,p1,polyClass)};static.intersection=function(p1,p2){return Clip.clip(OperationType.GPC_INT,p1,p2,"PolyDefault.class")};static.createNewPoly=function(polyClass){if(polyClass=="PolySimple"){return new gpcas.geometry.PolySimple}if(polyClass=="PolyDefault"){return new PolyDefault}if(polyClass=="PolyDefault.class"){return new PolyDefault}return null};static.clip=function(op,subj,clip,polyClass){var result=Clip.createNewPoly(polyClass);if(subj.isEmpty()&&clip.isEmpty()||subj.isEmpty()&&(op==OperationType.GPC_INT||op==OperationType.GPC_DIFF)||clip.isEmpty()&&op==OperationType.GPC_INT){return result}if((op==OperationType.GPC_INT||op==OperationType.GPC_DIFF)&&!subj.isEmpty()&&!clip.isEmpty()){Clip.minimax_test(subj,clip,op)}var lmt_table=new LmtTable;var sbte=new ScanBeamTreeEntries;var s_heap=null;var c_heap=null;if(!subj.isEmpty()){s_heap=Clip.build_lmt(lmt_table,sbte,subj,Clip.SUBJ,op)}if(Clip.DEBUG){lmt_table.print()}if(!clip.isEmpty()){c_heap=Clip.build_lmt(lmt_table,sbte,clip,Clip.CLIP,op)}if(Clip.DEBUG){lmt_table.print()}if(lmt_table.top_node==null){return result}var sbt=sbte.build_sbt();var parity=[];parity[0]=Clip.LEFT;parity[1]=Clip.LEFT;if(op==OperationType.GPC_DIFF){parity[Clip.CLIP]=Clip.RIGHT}if(Clip.DEBUG){}var local_min=lmt_table.top_node;var out_poly=new TopPolygonNode;var aet=new AetTree;var scanbeam=0;while(scanbeam<sbt.length){var yb=sbt[scanbeam++];var yt=0;var dy=0;if(scanbeam<sbt.length){yt=sbt[scanbeam];dy=yt-yb}if(local_min!=null){if(local_min.y==yb){for(var edge=local_min.first_bound;edge!=null;edge=edge.next_bound){Clip.add_edge_to_aet(aet,edge)}local_min=local_min.next}}if(Clip.DEBUG){aet.print()}var px=-Number.MAX_VALUE;var e0=aet.top_node;var e1=aet.top_node;aet.top_node.bundle[Clip.ABOVE][aet.top_node.type]=aet.top_node.top.y!=yb?1:0;aet.top_node.bundle[Clip.ABOVE][aet.top_node.type==0?1:0]=0;aet.top_node.bstate[Clip.ABOVE]=BundleState.UNBUNDLED;for(var next_edge=aet.top_node.next;next_edge!=null;next_edge=next_edge.next){var ne_type=next_edge.type;var ne_type_opp=next_edge.type==0?1:0;next_edge.bundle[Clip.ABOVE][ne_type]=next_edge.top.y!=yb?1:0;next_edge.bundle[Clip.ABOVE][ne_type_opp]=0;next_edge.bstate[Clip.ABOVE]=BundleState.UNBUNDLED;if(next_edge.bundle[Clip.ABOVE][ne_type]==1){if(Clip.EQ(e0.xb,next_edge.xb)&&Clip.EQ(e0.dx,next_edge.dx)&&e0.top.y!=yb){next_edge.bundle[Clip.ABOVE][ne_type]^=e0.bundle[Clip.ABOVE][ne_type];next_edge.bundle[Clip.ABOVE][ne_type_opp]=e0.bundle[Clip.ABOVE][ne_type_opp];next_edge.bstate[Clip.ABOVE]=BundleState.BUNDLE_HEAD;e0.bundle[Clip.ABOVE][Clip.CLIP]=0;e0.bundle[Clip.ABOVE][Clip.SUBJ]=0;e0.bstate[Clip.ABOVE]=BundleState.BUNDLE_TAIL}e0=next_edge}}var horiz=[];horiz[Clip.CLIP]=HState.NH;horiz[Clip.SUBJ]=HState.NH;var exists=[];exists[Clip.CLIP]=0;exists[Clip.SUBJ]=0;var cf=null;for(var edge=aet.top_node;edge!=null;edge=edge.next){exists[Clip.CLIP]=edge.bundle[Clip.ABOVE][Clip.CLIP]+(edge.bundle[Clip.BELOW][Clip.CLIP]<<1);exists[Clip.SUBJ]=edge.bundle[Clip.ABOVE][Clip.SUBJ]+(edge.bundle[Clip.BELOW][Clip.SUBJ]<<1);if(exists[Clip.CLIP]!=0||exists[Clip.SUBJ]!=0){edge.bside[Clip.CLIP]=parity[Clip.CLIP];edge.bside[Clip.SUBJ]=parity[Clip.SUBJ];var contributing=false;var br=0;var bl=0;var tr=0;var tl=0;if(op==OperationType.GPC_DIFF||op==OperationType.GPC_INT){contributing=exists[Clip.CLIP]!=0&&(parity[Clip.SUBJ]!=0||horiz[Clip.SUBJ]!=0)||exists[Clip.SUBJ]!=0&&(parity[Clip.CLIP]!=0||horiz[Clip.CLIP]!=0)||exists[Clip.CLIP]!=0&&exists[Clip.SUBJ]!=0&&parity[Clip.CLIP]==parity[Clip.SUBJ];br=parity[Clip.CLIP]!=0&&parity[Clip.SUBJ]!=0?1:0;bl=(parity[Clip.CLIP]^edge.bundle[Clip.ABOVE][Clip.CLIP])!=0&&(parity[Clip.SUBJ]^edge.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0;tr=(parity[Clip.CLIP]^(horiz[Clip.CLIP]!=HState.NH?1:0))!=0&&(parity[Clip.SUBJ]^(horiz[Clip.SUBJ]!=HState.NH?1:0))!=0?1:0;tl=(parity[Clip.CLIP]^(horiz[Clip.CLIP]!=HState.NH?1:0)^edge.bundle[Clip.BELOW][Clip.CLIP])!=0&&(parity[Clip.SUBJ]^(horiz[Clip.SUBJ]!=HState.NH?1:0)^edge.bundle[Clip.BELOW][Clip.SUBJ])!=0?1:0}else if(op==OperationType.GPC_XOR){contributing=exists[Clip.CLIP]!=0||exists[Clip.SUBJ]!=0;br=parity[Clip.CLIP]^parity[Clip.SUBJ];bl=parity[Clip.CLIP]^edge.bundle[Clip.ABOVE][Clip.CLIP]^(parity[Clip.SUBJ]^edge.bundle[Clip.ABOVE][Clip.SUBJ]);tr=parity[Clip.CLIP]^(horiz[Clip.CLIP]!=HState.NH?1:0)^(parity[Clip.SUBJ]^(horiz[Clip.SUBJ]!=HState.NH?1:0));tl=parity[Clip.CLIP]^(horiz[Clip.CLIP]!=HState.NH?1:0)^edge.bundle[Clip.BELOW][Clip.CLIP]^(parity[Clip.SUBJ]^(horiz[Clip.SUBJ]!=HState.NH?1:0)^edge.bundle[Clip.BELOW][Clip.SUBJ])}else if(op==OperationType.GPC_UNION){contributing=exists[Clip.CLIP]!=0&&(!(parity[Clip.SUBJ]!=0)||horiz[Clip.SUBJ]!=0)||exists[Clip.SUBJ]!=0&&(!(parity[Clip.CLIP]!=0)||horiz[Clip.CLIP]!=0)||exists[Clip.CLIP]!=0&&exists[Clip.SUBJ]!=0&&parity[Clip.CLIP]==parity[Clip.SUBJ];br=parity[Clip.CLIP]!=0||parity[Clip.SUBJ]!=0?1:0;bl=(parity[Clip.CLIP]^edge.bundle[Clip.ABOVE][Clip.CLIP])!=0||(parity[Clip.SUBJ]^edge.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0;tr=(parity[Clip.CLIP]^(horiz[Clip.CLIP]!=HState.NH?1:0))!=0||(parity[Clip.SUBJ]^(horiz[Clip.SUBJ]!=HState.NH?1:0))!=0?1:0;tl=(parity[Clip.CLIP]^(horiz[Clip.CLIP]!=HState.NH?1:0)^edge.bundle[Clip.BELOW][Clip.CLIP])!=0||(parity[Clip.SUBJ]^(horiz[Clip.SUBJ]!=HState.NH?1:0)^edge.bundle[Clip.BELOW][Clip.SUBJ])!=0?1:0}else{}parity[Clip.CLIP]^=edge.bundle[Clip.ABOVE][Clip.CLIP];parity[Clip.SUBJ]^=edge.bundle[Clip.ABOVE][Clip.SUBJ];if(exists[Clip.CLIP]!=0){horiz[Clip.CLIP]=HState.next_h_state[horiz[Clip.CLIP]][(exists[Clip.CLIP]-1<<1)+parity[Clip.CLIP]]}if(exists[Clip.SUBJ]!=0){horiz[Clip.SUBJ]=HState.next_h_state[horiz[Clip.SUBJ]][(exists[Clip.SUBJ]-1<<1)+parity[Clip.SUBJ]]}if(contributing){var xb=edge.xb;var vclass=VertexType.getType(tr,tl,br,bl);switch(vclass){case VertexType.EMN:case VertexType.IMN:edge.outp[Clip.ABOVE]=out_poly.add_local_min(xb,yb);px=xb;cf=edge.outp[Clip.ABOVE];break;case VertexType.ERI:if(xb!=px){cf.add_right(xb,yb);px=xb}edge.outp[Clip.ABOVE]=cf;cf=null;break;case VertexType.ELI:edge.outp[Clip.BELOW].add_left(xb,yb);px=xb;cf=edge.outp[Clip.BELOW];break;case VertexType.EMX:if(xb!=px){cf.add_left(xb,yb);px=xb}out_poly.merge_right(cf,edge.outp[Clip.BELOW]);cf=null;break;case VertexType.ILI:if(xb!=px){cf.add_left(xb,yb);px=xb}edge.outp[Clip.ABOVE]=cf;cf=null;break;case VertexType.IRI:edge.outp[Clip.BELOW].add_right(xb,yb);px=xb;cf=edge.outp[Clip.BELOW];edge.outp[Clip.BELOW]=null;break;case VertexType.IMX:if(xb!=px){cf.add_right(xb,yb);px=xb}out_poly.merge_left(cf,edge.outp[Clip.BELOW]);cf=null;edge.outp[Clip.BELOW]=null;break;case VertexType.IMM:if(xb!=px){cf.add_right(xb,yb);px=xb}out_poly.merge_left(cf,edge.outp[Clip.BELOW]);edge.outp[Clip.BELOW]=null;edge.outp[Clip.ABOVE]=out_poly.add_local_min(xb,yb);cf=edge.outp[Clip.ABOVE];break;case VertexType.EMM:if(xb!=px){cf.add_left(xb,yb);px=xb}out_poly.merge_right(cf,edge.outp[Clip.BELOW]);edge.outp[Clip.BELOW]=null;edge.outp[Clip.ABOVE]=out_poly.add_local_min(xb,yb);cf=edge.outp[Clip.ABOVE];break;case VertexType.LED:if(edge.bot.y==yb)edge.outp[Clip.BELOW].add_left(xb,yb);edge.outp[Clip.ABOVE]=edge.outp[Clip.BELOW];px=xb;break;case VertexType.RED:if(edge.bot.y==yb)edge.outp[Clip.BELOW].add_right(xb,yb);edge.outp[Clip.ABOVE]=edge.outp[Clip.BELOW];px=xb;break;default:break}}}if(Clip.DEBUG){out_poly.print()}out_poly.print()}for(var edge=aet.top_node;edge!=null;edge=edge.next){if(edge.top.y==yb){var prev_edge=edge.prev;var next_edge=edge.next;if(prev_edge!=null)prev_edge.next=next_edge;else aet.top_node=next_edge;if(next_edge!=null)next_edge.prev=prev_edge;if(edge.bstate[Clip.BELOW]==BundleState.BUNDLE_HEAD&&prev_edge!=null){if(prev_edge.bstate[Clip.BELOW]==BundleState.BUNDLE_TAIL){prev_edge.outp[Clip.BELOW]=edge.outp[Clip.BELOW];prev_edge.bstate[Clip.BELOW]=BundleState.UNBUNDLED;if(prev_edge.prev!=null){if(prev_edge.prev.bstate[Clip.BELOW]==BundleState.BUNDLE_TAIL){prev_edge.bstate[Clip.BELOW]=BundleState.BUNDLE_HEAD}}}}}else{if(edge.top.y==yt)edge.xt=edge.top.x;else edge.xt=edge.bot.x+edge.dx*(yt-edge.bot.y)}}if(scanbeam<sbte.sbt_entries){var it_table=new ItNodeTable;it_table.build_intersection_table(aet,dy);for(var intersect=it_table.top_node;intersect!=null;intersect=intersect.next){e0=intersect.ie[0];e1=intersect.ie[1];if((e0.bundle[Clip.ABOVE][Clip.CLIP]!=0||e0.bundle[Clip.ABOVE][Clip.SUBJ]!=0)&&(e1.bundle[Clip.ABOVE][Clip.CLIP]!=0||e1.bundle[Clip.ABOVE][Clip.SUBJ]!=0)){var p=e0.outp[Clip.ABOVE];var q=e1.outp[Clip.ABOVE];var ix=intersect.point.x;var iy=intersect.point.y+yb;var in_clip=e0.bundle[Clip.ABOVE][Clip.CLIP]!=0&&!(e0.bside[Clip.CLIP]!=0)||e1.bundle[Clip.ABOVE][Clip.CLIP]!=0&&e1.bside[Clip.CLIP]!=0||!(e0.bundle[Clip.ABOVE][Clip.CLIP]!=0)&&!(e1.bundle[Clip.ABOVE][Clip.CLIP]!=0)&&e0.bside[Clip.CLIP]!=0&&e1.bside[Clip.CLIP]!=0?1:0;var in_subj=e0.bundle[Clip.ABOVE][Clip.SUBJ]!=0&&!(e0.bside[Clip.SUBJ]!=0)||e1.bundle[Clip.ABOVE][Clip.SUBJ]!=0&&e1.bside[Clip.SUBJ]!=0||!(e0.bundle[Clip.ABOVE][Clip.SUBJ]!=0)&&!(e1.bundle[Clip.ABOVE][Clip.SUBJ]!=0)&&e0.bside[Clip.SUBJ]!=0&&e1.bside[Clip.SUBJ]!=0?1:0;var tr=0;var tl=0;var br=0;var bl=0;if(op==OperationType.GPC_DIFF||op==OperationType.GPC_INT){tr=in_clip!=0&&in_subj!=0?1:0;tl=(in_clip^e1.bundle[Clip.ABOVE][Clip.CLIP])!=0&&(in_subj^e1.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0;br=(in_clip^e0.bundle[Clip.ABOVE][Clip.CLIP])!=0&&(in_subj^e0.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0;bl=(in_clip^e1.bundle[Clip.ABOVE][Clip.CLIP]^e0.bundle[Clip.ABOVE][Clip.CLIP])!=0&&(in_subj^e1.bundle[Clip.ABOVE][Clip.SUBJ]^e0.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0}else if(op==OperationType.GPC_XOR){tr=in_clip^in_subj;tl=in_clip^e1.bundle[Clip.ABOVE][Clip.CLIP]^(in_subj^e1.bundle[Clip.ABOVE][Clip.SUBJ]);br=in_clip^e0.bundle[Clip.ABOVE][Clip.CLIP]^(in_subj^e0.bundle[Clip.ABOVE][Clip.SUBJ]);bl=in_clip^e1.bundle[Clip.ABOVE][Clip.CLIP]^e0.bundle[Clip.ABOVE][Clip.CLIP]^(in_subj^e1.bundle[Clip.ABOVE][Clip.SUBJ]^e0.bundle[Clip.ABOVE][Clip.SUBJ])}else if(op==OperationType.GPC_UNION){tr=in_clip!=0||in_subj!=0?1:0;tl=(in_clip^e1.bundle[Clip.ABOVE][Clip.CLIP])!=0||(in_subj^e1.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0;br=(in_clip^e0.bundle[Clip.ABOVE][Clip.CLIP])!=0||(in_subj^e0.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0;bl=(in_clip^e1.bundle[Clip.ABOVE][Clip.CLIP]^e0.bundle[Clip.ABOVE][Clip.CLIP])!=0||(in_subj^e1.bundle[Clip.ABOVE][Clip.SUBJ]^e0.bundle[Clip.ABOVE][Clip.SUBJ])!=0?1:0}else{}var vclass=VertexType.getType(tr,tl,br,bl);switch(vclass){case VertexType.EMN:e0.outp[Clip.ABOVE]=out_poly.add_local_min(ix,iy);e1.outp[Clip.ABOVE]=e0.outp[Clip.ABOVE];break;case VertexType.ERI:if(p!=null){p.add_right(ix,iy);e1.outp[Clip.ABOVE]=p;e0.outp[Clip.ABOVE]=null}break;case VertexType.ELI:if(q!=null){q.add_left(ix,iy);e0.outp[Clip.ABOVE]=q;e1.outp[Clip.ABOVE]=null}break;case VertexType.EMX:if(p!=null&&q!=null){p.add_left(ix,iy);out_poly.merge_right(p,q);e0.outp[Clip.ABOVE]=null;e1.outp[Clip.ABOVE]=null}break;case VertexType.IMN:e0.outp[Clip.ABOVE]=out_poly.add_local_min(ix,iy);e1.outp[Clip.ABOVE]=e0.outp[Clip.ABOVE];break;case VertexType.ILI:if(p!=null){p.add_left(ix,iy);e1.outp[Clip.ABOVE]=p;e0.outp[Clip.ABOVE]=null}break;case VertexType.IRI:if(q!=null){q.add_right(ix,iy);e0.outp[Clip.ABOVE]=q;e1.outp[Clip.ABOVE]=null}break;case VertexType.IMX:if(p!=null&&q!=null){p.add_right(ix,iy);out_poly.merge_left(p,q);e0.outp[Clip.ABOVE]=null;e1.outp[Clip.ABOVE]=null}break;case VertexType.IMM:if(p!=null&&q!=null){p.add_right(ix,iy);out_poly.merge_left(p,q);e0.outp[Clip.ABOVE]=out_poly.add_local_min(ix,iy);e1.outp[Clip.ABOVE]=e0.outp[Clip.ABOVE]}break;case VertexType.EMM:if(p!=null&&q!=null){p.add_left(ix,iy);out_poly.merge_right(p,q);e0.outp[Clip.ABOVE]=out_poly.add_local_min(ix,iy);e1.outp[Clip.ABOVE]=e0.outp[Clip.ABOVE]}break;default:break}}if(e0.bundle[Clip.ABOVE][Clip.CLIP]!=0)e1.bside[Clip.CLIP]=e1.bside[Clip.CLIP]==0?1:0;if(e1.bundle[Clip.ABOVE][Clip.CLIP]!=0)e0.bside[Clip.CLIP]=e0.bside[Clip.CLIP]==0?1:0;if(e0.bundle[Clip.ABOVE][Clip.SUBJ]!=0)e1.bside[Clip.SUBJ]=e1.bside[Clip.SUBJ]==0?1:0;if(e1.bundle[Clip.ABOVE][Clip.SUBJ]!=0)e0.bside[Clip.SUBJ]=e0.bside[Clip.SUBJ]==0?1:0;var prev_edge=e0.prev;var next_edge=e1.next;if(next_edge!=null){next_edge.prev=e0}if(e0.bstate[Clip.ABOVE]==BundleState.BUNDLE_HEAD){var search=true;while(search){prev_edge=prev_edge.prev;if(prev_edge!=null){if(prev_edge.bstate[Clip.ABOVE]!=BundleState.BUNDLE_TAIL){search=false}}else{search=false}}}if(prev_edge==null){aet.top_node.prev=e1;e1.next=aet.top_node;aet.top_node=e0.next}else{prev_edge.next.prev=e1;e1.next=prev_edge.next;prev_edge.next=e0.next}e0.next.prev=prev_edge;e1.next.prev=e1;e0.next=next_edge;if(Clip.DEBUG){out_poly.print()}}for(var edge=aet.top_node;edge!=null;edge=edge.next){var next_edge=edge.next;var succ_edge=edge.succ;if(edge.top.y==yt&&succ_edge!=null){succ_edge.outp[Clip.BELOW]=edge.outp[Clip.ABOVE];succ_edge.bstate[Clip.BELOW]=edge.bstate[Clip.ABOVE];succ_edge.bundle[Clip.BELOW][Clip.CLIP]=edge.bundle[Clip.ABOVE][Clip.CLIP];succ_edge.bundle[Clip.BELOW][Clip.SUBJ]=edge.bundle[Clip.ABOVE][Clip.SUBJ];var prev_edge=edge.prev;if(prev_edge!=null)prev_edge.next=succ_edge;else aet.top_node=succ_edge;if(next_edge!=null)next_edge.prev=succ_edge;succ_edge.prev=prev_edge;succ_edge.next=next_edge}else{edge.outp[Clip.BELOW]=edge.outp[Clip.ABOVE];edge.bstate[Clip.BELOW]=edge.bstate[Clip.ABOVE];edge.bundle[Clip.BELOW][Clip.CLIP]=edge.bundle[Clip.ABOVE][Clip.CLIP];edge.bundle[Clip.BELOW][Clip.SUBJ]=edge.bundle[Clip.ABOVE][Clip.SUBJ];edge.xb=edge.xt}edge.outp[Clip.ABOVE]=null}}}result=out_poly.getResult(polyClass);return result};static.EQ=function(a,b){return Math.abs(a-b)<=Clip.GPC_EPSILON};static.PREV_INDEX=function(i,n){return(i-1+n)%n};static.NEXT_INDEX=function(i,n){return(i+1)%n};static.OPTIMAL=function(p,i){return p.getY(Clip.PREV_INDEX(i,p.getNumPoints()))!=p.getY(i)||p.getY(Clip.NEXT_INDEX(i,p.getNumPoints()))!=p.getY(i)};static.create_contour_bboxes=function(p){var box=[];for(var c=0;c<p.getNumInnerPoly();c++){var inner_poly=p.getInnerPoly(c);box[c]=inner_poly.getBounds()}return box};static.minimax_test=function(subj,clip,op){var s_bbox=Clip.create_contour_bboxes(subj);var c_bbox=Clip.create_contour_bboxes(clip);var subj_num_poly=subj.getNumInnerPoly();var clip_num_poly=clip.getNumInnerPoly();var o_table=ArrayHelper.create2DArray(subj_num_poly,clip_num_poly);for(var s=0;s<subj_num_poly;s++){for(var c=0;c<clip_num_poly;c++){o_table[s][c]=!(s_bbox[s].getMaxX()<c_bbox[c].getMinX()||s_bbox[s].getMinX()>c_bbox[c].getMaxX())&&!(s_bbox[s].getMaxY()<c_bbox[c].getMinY()||s_bbox[s].getMinY()>c_bbox[c].getMaxY())}}for(var c=0;c<clip_num_poly;c++){var overlap=false;for(var s=0;!overlap&&s<subj_num_poly;s++){overlap=o_table[s][c]}if(!overlap){clip.setContributing(c,false)}}if(op==OperationType.GPC_INT){for(var s=0;s<subj_num_poly;s++){var overlap=false;for(var c=0;!overlap&&c<clip_num_poly;c++){overlap=o_table[s][c]}if(!overlap){subj.setContributing(s,false)}}}};static.bound_list=function(lmt_table,y){if(lmt_table.top_node==null){lmt_table.top_node=new LmtNode(y);return lmt_table.top_node}else{var prev=null;var node=lmt_table.top_node;var done=false;while(!done){if(y<node.y){var existing_node=node;node=new LmtNode(y);node.next=existing_node;if(prev==null){lmt_table.top_node=node}else{prev.next=node}done=true}else if(y>node.y){if(node.next==null){node.next=new LmtNode(y);node=node.next;done=true}else{prev=node;node=node.next}}else{done=true}}return node}};static.insert_bound=function(lmt_node,e){if(lmt_node.first_bound==null){lmt_node.first_bound=e}else{var done=false;var prev_bound=null;var current_bound=lmt_node.first_bound;while(!done){if(e.bot.x<current_bound.bot.x){if(prev_bound==null){lmt_node.first_bound=e}else{prev_bound.next_bound=e}e.next_bound=current_bound;done=true}else if(e.bot.x==current_bound.bot.x){if(e.dx<current_bound.dx){if(prev_bound==null){lmt_node.first_bound=e}else{prev_bound.next_bound=e}e.next_bound=current_bound;done=true}else{if(current_bound.next_bound==null){current_bound.next_bound=e;done=true}else{prev_bound=current_bound;current_bound=current_bound.next_bound}}}else{if(current_bound.next_bound==null){current_bound.next_bound=e;done=true}else{prev_bound=current_bound;current_bound=current_bound.next_bound}}}}};static.add_edge_to_aet=function(aet,edge){if(aet.top_node==null){aet.top_node=edge;edge.prev=null;edge.next=null}else{var current_edge=aet.top_node;var prev=null;var done=false;while(!done){if(edge.xb<current_edge.xb){edge.prev=prev;edge.next=current_edge;current_edge.prev=edge;if(prev==null){aet.top_node=edge}else{prev.next=edge}done=true}else if(edge.xb==current_edge.xb){if(edge.dx<current_edge.dx){edge.prev=prev;edge.next=current_edge;current_edge.prev=edge;if(prev==null){aet.top_node=edge}else{prev.next=edge}done=true}else{prev=current_edge;if(current_edge.next==null){current_edge.next=edge;edge.prev=current_edge;edge.next=null;done=true}else{current_edge=current_edge.next}}}else{prev=current_edge;if(current_edge.next==null){current_edge.next=edge;edge.prev=current_edge;edge.next=null;done=true}else{current_edge=current_edge.next}}}}};static.add_to_sbtree=function(sbte,y){if(sbte.sb_tree==null){sbte.sb_tree=new ScanBeamTree(y);sbte.sbt_entries++;return}var tree_node=sbte.sb_tree;var done=false;while(!done){if(tree_node.y>y){if(tree_node.less==null){tree_node.less=new ScanBeamTree(y);sbte.sbt_entries++;done=true}else{tree_node=tree_node.less}}else if(tree_node.y<y){if(tree_node.more==null){tree_node.more=new ScanBeamTree(y);sbte.sbt_entries++;done=true}else{tree_node=tree_node.more}}else{done=true}}};static.build_lmt=function(lmt_table,sbte,p,type,op){var edge_table=new EdgeTable;for(var c=0;c<p.getNumInnerPoly();c++){var ip=p.getInnerPoly(c);if(!ip.isContributing(0)){ip.setContributing(0,true)}else{var num_vertices=0;var e_index=0;edge_table=new EdgeTable;for(var i=0;i<ip.getNumPoints();i++){if(Clip.OPTIMAL(ip,i)){var x=ip.getX(i);var y=ip.getY(i);edge_table.addNode(x,y);Clip.add_to_sbtree(sbte,ip.getY(i));num_vertices++}}for(var min=0;min<num_vertices;min++){if(edge_table.FWD_MIN(min)){var num_edges=1;var max=Clip.NEXT_INDEX(min,num_vertices);while(edge_table.NOT_FMAX(max)){num_edges++;max=Clip.NEXT_INDEX(max,num_vertices)}var v=min;var e=edge_table.getNode(e_index);e.bstate[Clip.BELOW]=BundleState.UNBUNDLED;e.bundle[Clip.BELOW][Clip.CLIP]=0;e.bundle[Clip.BELOW][Clip.SUBJ]=0;for(var i=0;i<num_edges;i++){var ei=edge_table.getNode(e_index+i);var ev=edge_table.getNode(v);ei.xb=ev.vertex.x;ei.bot.x=ev.vertex.x;ei.bot.y=ev.vertex.y;v=Clip.NEXT_INDEX(v,num_vertices);ev=edge_table.getNode(v);ei.top.x=ev.vertex.x;ei.top.y=ev.vertex.y;ei.dx=(ev.vertex.x-ei.bot.x)/(ei.top.y-ei.bot.y);ei.type=type;ei.outp[Clip.ABOVE]=null;ei.outp[Clip.BELOW]=null;ei.next=null;ei.prev=null;ei.succ=num_edges>1&&i<num_edges-1?edge_table.getNode(e_index+i+1):null;ei.pred=num_edges>1&&i>0?edge_table.getNode(e_index+i-1):null;ei.next_bound=null;ei.bside[Clip.CLIP]=op==OperationType.GPC_DIFF?Clip.RIGHT:Clip.LEFT;ei.bside[Clip.SUBJ]=Clip.LEFT}Clip.insert_bound(Clip.bound_list(lmt_table,edge_table.getNode(min).vertex.y),e);if(Clip.DEBUG){lmt_table.print()}e_index+=num_edges}}for(var min=0;min<num_vertices;min++){if(edge_table.REV_MIN(min)){var num_edges=1;var max=Clip.PREV_INDEX(min,num_vertices);while(edge_table.NOT_RMAX(max)){num_edges++;max=Clip.PREV_INDEX(max,num_vertices)}var v=min;var e=edge_table.getNode(e_index);e.bstate[Clip.BELOW]=BundleState.UNBUNDLED;e.bundle[Clip.BELOW][Clip.CLIP]=0;e.bundle[Clip.BELOW][Clip.SUBJ]=0;for(var i=0;i<num_edges;i++){var ei=edge_table.getNode(e_index+i);var ev=edge_table.getNode(v);ei.xb=ev.vertex.x;ei.bot.x=ev.vertex.x;ei.bot.y=ev.vertex.y;v=Clip.PREV_INDEX(v,num_vertices);ev=edge_table.getNode(v);ei.top.x=ev.vertex.x;ei.top.y=ev.vertex.y;ei.dx=(ev.vertex.x-ei.bot.x)/(ei.top.y-ei.bot.y);ei.type=type;ei.outp[Clip.ABOVE]=null;ei.outp[Clip.BELOW]=null;ei.next=null;ei.prev=null;ei.succ=num_edges>1&&i<num_edges-1?edge_table.getNode(e_index+i+1):null;ei.pred=num_edges>1&&i>0?edge_table.getNode(e_index+i-1):null;ei.next_bound=null;ei.bside[Clip.CLIP]=op==OperationType.GPC_DIFF?Clip.RIGHT:Clip.LEFT;ei.bside[Clip.SUBJ]=Clip.LEFT}Clip.insert_bound(Clip.bound_list(lmt_table,edge_table.getNode(min).vertex.y),e);if(Clip.DEBUG){lmt_table.print()}e_index+=num_edges}}}}return edge_table};static.add_st_edge=function(st,it,edge,dy){if(st==null){st=new StNode(edge,null)}else{var den=st.xt-st.xb-(edge.xt-edge.xb);if(edge.xt>=st.xt||edge.dx==st.dx||Math.abs(den)<=Clip.GPC_EPSILON){var existing_node=st;st=new StNode(edge,existing_node)}else{var r=(edge.xb-st.xb)/den;var x=st.xb+r*(st.xt-st.xb);var y=r*dy;it.top_node=Clip.add_intersection(it.top_node,st.edge,edge,x,y);st.prev=Clip.add_st_edge(st.prev,it,edge,dy)}}return st};static.add_intersection=function(it_node,edge0,edge1,x,y){if(it_node==null){it_node=new ItNode(edge0,edge1,x,y,null)}else{if(it_node.point.y>y){var existing_node=it_node;it_node=new ItNode(edge0,edge1,x,y,existing_node)}else{it_node.next=Clip.add_intersection(it_node.next,edge0,edge1,x,y)}}return it_node};gpcas.geometry.AetTree=function(){this.top_node=null};gpcas.geometry.AetTree.prototype.print=function(){for(var edge=this.top_node;edge!=null;edge=edge.next){}};gpcas.geometry.BundleState=function(state){this.m_State=state};gpcas.geometry.BundleState.UNBUNDLED=new gpcas.geometry.BundleState("UNBUNDLED");gpcas.geometry.BundleState.BUNDLE_HEAD=new gpcas.geometry.BundleState("BUNDLE_HEAD");gpcas.geometry.BundleState.BUNDLE_TAIL=new gpcas.geometry.BundleState("BUNDLE_TAIL");gpcas.geometry.BundleState.prototype.toString=function(){return this.m_State};gpcas.geometry.EdgeNode=function(){this.vertex=new Point;this.bot=new Point;this.top=new Point;this.xb;this.xt;this.dx;this.type;this.bundle=ArrayHelper.create2DArray(2,2);this.bside=[];this.bstate=[];this.outp=[];this.prev;this.next;this.pred;this.succ;this.next_bound};gpcas.geometry.EdgeTable=function(){this.m_List=new gpcas.util.ArrayList};gpcas.geometry.EdgeTable.prototype.addNode=function(x,y){var node=new EdgeNode;node.vertex.x=x;node.vertex.y=y;this.m_List.add(node)};gpcas.geometry.EdgeTable.prototype.getNode=function(index){return this.m_List.get(index)};gpcas.geometry.EdgeTable.prototype.FWD_MIN=function(i){var m_List=this.m_List;var prev=m_List.get(Clip.PREV_INDEX(i,m_List.size()));var next=m_List.get(Clip.NEXT_INDEX(i,m_List.size()));var ith=m_List.get(i);return prev.vertex.y>=ith.vertex.y&&next.vertex.y>ith.vertex.y};gpcas.geometry.EdgeTable.prototype.NOT_FMAX=function(i){var m_List=this.m_List;var next=m_List.get(Clip.NEXT_INDEX(i,m_List.size()));var ith=m_List.get(i);return next.vertex.y>ith.vertex.y};gpcas.geometry.EdgeTable.prototype.REV_MIN=function(i){var m_List=this.m_List;var prev=m_List.get(Clip.PREV_INDEX(i,m_List.size()));var next=m_List.get(Clip.NEXT_INDEX(i,m_List.size()));var ith=m_List.get(i);return prev.vertex.y>ith.vertex.y&&next.vertex.y>=ith.vertex.y};gpcas.geometry.EdgeTable.prototype.NOT_RMAX=function(i){var m_List=this.m_List;var prev=m_List.get(Clip.PREV_INDEX(i,m_List.size()));var ith=m_List.get(i);return prev.vertex.y>ith.vertex.y};gpcas.geometry.HState=function(){};gpcas.geometry.HState.NH=0;gpcas.geometry.HState.BH=1;gpcas.geometry.HState.TH=2;var NH=gpcas.geometry.HState.NH;var BH=gpcas.geometry.HState.BH;var TH=gpcas.geometry.HState.TH;gpcas.geometry.HState.next_h_state=[[BH,TH,TH,BH,NH,NH],[NH,NH,NH,NH,TH,TH],[NH,NH,NH,NH,BH,BH]];gpcas.geometry.IntersectionPoint=function(p1,p2,p3){this.polygonPoint1=p1;this.polygonPoint2=p2;this.intersectionPoint=p3};gpcas.geometry.IntersectionPoint.prototype.toString=function(){return"P1 :"+polygonPoint1.toString()+" P2:"+polygonPoint2.toString()+" IP:"+intersectionPoint.toString()};gpcas.geometry.ItNode=function(edge0,edge1,x,y,next){this.ie=[];this.point=new Point(x,y);this.next=next;this.ie[0]=edge0;this.ie[1]=edge1};gpcas.geometry.ItNodeTable=function(){this.top_node};gpcas.geometry.ItNodeTable.prototype.build_intersection_table=function(aet,dy){var st=null;for(var edge=aet.top_node;edge!=null;edge=edge.next){if(edge.bstate[Clip.ABOVE]==BundleState.BUNDLE_HEAD||edge.bundle[Clip.ABOVE][Clip.CLIP]!=0||edge.bundle[Clip.ABOVE][Clip.SUBJ]!=0){st=Clip.add_st_edge(st,this,edge,dy)}}};gpcas.geometry.Line=function(){this.start;this.end};gpcas.geometry.LineHelper=function(){};gpcas.geometry.LineHelper.equalPoint=function(p1,p2){return p1[0]==p2[0]&&p1[1]==p2[1]};gpcas.geometry.LineHelper.equalVertex=function(s1,e1,s2,e2){return gpcas.geometry.LineHelper.equalPoint(s1,s2)&&gpcas.geometry.LineHelper.equalPoint(e1,e2)||gpcas.geometry.LineHelper.equalPoint(s1,e2)&&gpcas.geometry.LineHelper.equalPoint(e1,s2)};gpcas.geometry.LineHelper.distancePoints=function(p1,p2){return Math.sqrt((p2[0]-p1[0])*(p2[0]-p1[0])+(p2[1]-p1[1])*(p2[1]-p1[1]))};gpcas.geometry.LineHelper.clonePoint=function(p){return[p[0],p[1]]};gpcas.geometry.LineHelper.cloneLine=function(line){var res=[];for(var i=0;i<line.length;i++){res[i]=[line[i][0],line[i][1]]}return res};gpcas.geometry.LineHelper.addLineToLine=function(line1,line2){for(var i=0;i<line2.length;i++){line1.push(clonePoint(line2[i]))}};gpcas.geometry.LineHelper.roundPoint=function(p){p[0]=Math.round(p[0]);p[1]=Math.round(p[1])};gpcas.geometry.LineHelper.lineIntersectLine=function(A,B,E,F,as_seg){if(as_seg==null)as_seg=true;var ip;var a1;var a2;var b1;var b2;var c1;var c2;a1=B.y-A.y;b1=A.x-B.x;c1=B.x*A.y-A.x*B.y;a2=F.y-E.y;b2=E.x-F.x;c2=F.x*E.y-E.x*F.y;var denom=a1*b2-a2*b1;if(denom==0){return null}ip=new Point;ip.x=(b1*c2-b2*c1)/denom;ip.y=(a2*c1-a1*c2)/denom;if(as_seg){if(Math.pow(ip.x-B.x+(ip.y-B.y),2)>Math.pow(A.x-B.x+(A.y-B.y),2)){return null}if(Math.pow(ip.x-A.x+(ip.y-A.y),2)>Math.pow(A.x-B.x+(A.y-B.y),2)){return null}if(Math.pow(ip.x-F.x+(ip.y-F.y),2)>Math.pow(E.x-F.x+(E.y-F.y),2)){return null}if(Math.pow(ip.x-E.x+(ip.y-E.y),2)>Math.pow(E.x-F.x+(E.y-F.y),2)){return null}}return new Point(Math.round(ip.x),Math.round(ip.y))};gpcas.geometry.LineIntersection=function(){};gpcas.geometry.LineIntersection.iteratePoints=function(points,s1,s2,e1,e2){var direction=true;var pl=points.length;var s1Ind=points.indexOf(s1);var s2Ind=points.indexOf(s2);var start=s1Ind;if(s2Ind>s1Ind)direction=false;var newPoints=[];var point;if(direction){for(var i=0;i<pl;i++){point=i+start<pl?points[i+start]:points[i+start-pl];newPoints.push(point);if(equals(point,e1)||equals(point,e2)){break}}}else{for(var i=pl;i>=0;i--){point=i+start<pl?points[i+start]:points[i+start-pl];newPoints.push(point);if(equals(point,e1)||equals(point,e2)){break}}}return newPoints};gpcas.geometry.LineIntersection.intersectPoly=function(poly,line){var res=[];var numPoints=poly.getNumPoints();var ip;var p1;var p2;var p3;var p4;var firstIntersection=null;var lastIntersection=null;var firstIntersectionLineIndex=-1;var lastIntersectionLineIndex=-1;var firstFound=false;for(var i=1;i<line.length;i++){p1=line[i-1];p2=line[i];var maxDist=0;var minDist=Number.MAX_VALUE;var dist=-1;for(var j=0;j<numPoints;j++){p3=poly.getPoint(j==0?numPoints-1:j-1);p4=poly.getPoint(j);if((ip=LineHelper.lineIntersectLine(p1,p2,p3,p4))!=null){dist=Point.distance(ip,p2);if(dist>maxDist&&!firstFound){maxDist=dist;firstIntersection=new IntersectionPoint(p3,p4,ip);firstIntersectionLineIndex=i}if(dist<minDist){minDist=dist;lastIntersection=new IntersectionPoint(p3,p4,ip);lastIntersectionLineIndex=i-1}}}firstFound=firstIntersection!=null}if(firstIntersection!=null&&lastIntersection!=null){var newLine=[];newLine[0]=firstIntersection.intersectionPoint;var j=1;for(var i=firstIntersectionLineIndex;i<=lastIntersectionLineIndex;i++){newLine[j++]=line[i]}newLine[newLine.length-1]=lastIntersection.intersectionPoint;if(equals(firstIntersection.polygonPoint1,lastIntersection.polygonPoint1)&&equals(firstIntersection.polygonPoint2,lastIntersection.polygonPoint2)||equals(firstIntersection.polygonPoint1,lastIntersection.polygonPoint2)&&equals(firstIntersection.polygonPoint2,lastIntersection.polygonPoint1)){var poly1=new gpcas.geometry.PolySimple;poly1.add(newLine);var finPoly1=poly.intersection(poly1);var finPoly2=poly.xor(poly1);if(checkPoly(finPoly1)&&checkPoly(finPoly2)){return[finPoly1,finPoly2]}}else{var points1=iteratePoints(poly.getPoints(),firstIntersection.polygonPoint1,firstIntersection.polygonPoint2,lastIntersection.polygonPoint1,lastIntersection.polygonPoint2);points1=points1.concat(newLine.reverse());var points2=iteratePoints(poly.getPoints(),firstIntersection.polygonPoint2,firstIntersection.polygonPoint1,lastIntersection.polygonPoint1,lastIntersection.polygonPoint2);points2=points2.concat(newLine);var poly1=new gpcas.geometry.PolySimple;poly1.add(points1);var poly2=new gpcas.geometry.PolySimple;poly2.add(points2);var finPoly1=poly.intersection(poly1);var finPoly2=poly.intersection(poly2);if(checkPoly(finPoly1)&&checkPoly(finPoly2)){return[finPoly1,finPoly2]}}}return null};gpcas.geometry.LineIntersection.checkPoly=function(poly){var noHoles=0;for(var i=0;i<poly.getNumInnerPoly();i++){var innerPoly=poly.getInnerPoly(i);if(innerPoly.isHole()){return false}else{noHoles++}if(noHoles>1)return false}return true};gpcas.geometry.LmtNode=function(yvalue){this.y=yvalue;this.first_bound;this.next};gpcas.geometry.LmtTable=function(){this.top_node};gpcas.geometry.LmtTable.prototype.print=function(){var n=0;var lmt=this.top_node;while(lmt!=null){for(var edge=lmt.first_bound;edge!=null;edge=edge.next_bound){}n++;lmt=lmt.next}};gpcas.geometry.OperationType=function(type){this.m_Type=type};gpcas.geometry.OperationType.GPC_DIFF=new gpcas.geometry.OperationType("Difference");gpcas.geometry.OperationType.GPC_INT=new gpcas.geometry.OperationType("Intersection");gpcas.geometry.OperationType.GPC_XOR=new gpcas.geometry.OperationType("Exclusive or");gpcas.geometry.OperationType.GPC_UNION=new gpcas.geometry.OperationType("Union");gpcas.geometry.PolyDefault=function(isHole){if(isHole==null)isHole=false;this.m_IsHole=isHole;this.m_List=new gpcas.util.ArrayList};gpcas.geometry.PolyDefault.prototype.equals=function(obj){if(!(obj instanceof PolyDefault)){return false}var that=obj;if(this.m_IsHole!=that.m_IsHole)return false;if(!equals(this.m_List,that.m_List))return false;return true};gpcas.geometry.PolyDefault.prototype.hashCode=function(){var m_List=this.m_List;var result=17;result=37*result+m_List.hashCode();return result};gpcas.geometry.PolyDefault.prototype.clear=function(){this.m_List.clear()};gpcas.geometry.PolyDefault.prototype.add=function(arg0,arg1){var args=[];args[0]=arg0;if(undefined!==arg1){args[1]=arg1}if(args.length==2){this.addPointXY(args[0],args[1])}else if(args.length==1){if(args[0]instanceof Point){this.addPoint(args[0])}else if(args[0]instanceof gpcas.geometry.PolySimple){this.addPoly(args[0])}else if(args[0]instanceof Array){var arr=args[0];if(arr.length==2&&arr[0]instanceof Number&&arr[1]instanceof Number){this.add(arr[0],arr[1])}else{for(var i=0;i<args[0].length;i++){this.add(args[0][i])}}}}};gpcas.geometry.PolyDefault.prototype.addPointXY=function(x,y){this.addPoint(new Point(x,y))};gpcas.geometry.PolyDefault.prototype.addPoint=function(p){var m_List=this.m_List;if(m_List.size()==0){m_List.add(new gpcas.geometry.PolySimple)}m_List.get(0).addPoint(p)};gpcas.geometry.PolyDefault.prototype.addPoly=function(p){var m_IsHole=this.m_IsHole;var m_List=this.m_List;if(m_List.size()>0&&m_IsHole){alert("ERROR : Cannot add polys to something designated as a hole.")}m_List.add(p)};gpcas.geometry.PolyDefault.prototype.isEmpty=function(){return this.m_List.isEmpty()};gpcas.geometry.PolyDefault.prototype.getBounds=function(){var m_List=this.m_List;if(m_List.size()==0){return new Rectangle}else if(m_List.size()==1){var ip=this.getInnerPoly(0);return ip.getBounds()}else{console.log("getBounds not supported on complex poly.")}};gpcas.geometry.PolyDefault.prototype.getInnerPoly=function(polyIndex){return this.m_List.get(polyIndex)};gpcas.geometry.PolyDefault.prototype.getNumInnerPoly=function(){var m_List=this.m_List;return m_List.size()};gpcas.geometry.PolyDefault.prototype.getNumPoints=function(){return this.m_List.get(0).getNumPoints()};gpcas.geometry.PolyDefault.prototype.getX=function(index){return this.m_List.get(0).getX(index)};gpcas.geometry.PolyDefault.prototype.getPoint=function(index){return this.m_List.get(0).getPoint(index)};gpcas.geometry.PolyDefault.prototype.getPoints=function(){return this.m_List.get(0).getPoints()};gpcas.geometry.PolyDefault.prototype.isPointInside=function(point){var m_List=this.m_List;if(!m_List.get(0).isPointInside(point))return false;for(var i=0;i<m_List.size();i++){var poly=m_List.get(i);if(poly.isHole()&&poly.isPointInside(point))return false}return true};gpcas.geometry.PolyDefault.prototype.getY=function(index){var m_List=this.m_List;return m_List.get(0).getY(index)};gpcas.geometry.PolyDefault.prototype.isHole=function(){var m_List=this.m_List;var m_IsHole=this.m_IsHole;if(m_List.size()>1){alert("Cannot call on a poly made up of more than one poly.")}return m_IsHole};gpcas.geometry.PolyDefault.prototype.setIsHole=function(isHole){var m_List=this.m_List;if(m_List.size()>1){alert("Cannot call on a poly made up of more than one poly.")}this.m_IsHole=isHole};gpcas.geometry.PolyDefault.prototype.isContributing=function(polyIndex){var m_List=this.m_List;return m_List.get(polyIndex).isContributing(0)};gpcas.geometry.PolyDefault.prototype.setContributing=function(polyIndex,contributes){var m_List=this.m_List;if(m_List.size()!=1){alert("Only applies to polys of size 1")}m_List.get(polyIndex).setContributing(0,contributes)};gpcas.geometry.PolyDefault.prototype.intersection=function(p){return Clip.intersection(p,this,"PolyDefault")};gpcas.geometry.PolyDefault.prototype.union=function(p){return Clip.union(p,this,"PolyDefault")};gpcas.geometry.PolyDefault.prototype.xor=function(p){return Clip.xor(p,this,"PolyDefault")};gpcas.geometry.PolyDefault.prototype.difference=function(p){return Clip.difference(p,this,"PolyDefault")};gpcas.geometry.PolyDefault.prototype.getArea=function(){var area=0;for(var i=0;i<getNumInnerPoly();i++){var p=getInnerPoly(i);var tarea=p.getArea()*(p.isHole()?-1:1);area+=tarea}return area};gpcas.geometry.PolyDefault.prototype.toString=function(){var res="";var m_List=this.m_List;for(var i=0;i<m_List.size();i++){var p=this.getInnerPoly(i);res+="InnerPoly("+i+").hole="+p.isHole();var points=[];for(var j=0;j<p.getNumPoints();j++){points.push(new Point(p.getX(j),p.getY(j)))}points=ArrayHelper.sortPointsClockwise(points);for(var k=0;k<points.length;k++){res+=points[k].toString()}}return res};gpcas.geometry.Polygon=function(){this.maxTop;this.maxBottom;this.maxLeft;this.maxRight;this.vertices};gpcas.geometry.Polygon.prototype.fromArray=function(v){this.vertices=[];for(var i=0;i<v.length;i++){var pointArr=v[i];this.vertices.push(new Point(pointArr[0],pointArr[1]))}};gpcas.geometry.Polygon.prototype.normalize=function(){var maxLeftIndex;var vertices=this.vertices;var newVertices=this.vertices;for(var i=0;i<vertices.length;i++){var vertex=vertices[i];if(maxTop==null||maxTop.y>vertex.y||maxTop.y==vertex.y&&vertex.x<maxTop.x){maxTop=vertex}if(maxBottom==null||maxBottom.y<vertex.y||maxBottom.y==vertex.y&&vertex.x>maxBottom.x){maxBottom=vertex}if(maxLeft==null||maxLeft.x>vertex.x||maxLeft.x==vertex.x&&vertex.y>maxLeft.y){maxLeft=vertex;maxLeftIndex=i}if(maxRight==null||maxRight.x<vertex.x||maxRight.x==vertex.x&&vertex.y<maxRight.y){maxRight=vertex}}if(maxLeftIndex>0){newVertices=[];var j=0;for(var i=maxLeftIndex;i<vertices.length;i++){newVertices[j++]=this.vertices[i]}for(var i=0;i<maxLeftIndex;i++){newVertices[j++]=this.vertices[i]}vertices=newVertices}var reverse=false;for(var k=0;k<this.vertices.length;k++){var vertex=this.vertices[k];if(equals(vertex,maxBottom)){reverse=true;break}else if(equals(vertex,maxTop)){break}}if(reverse){newVertices=[];newVertices[0]=vertices[0];var j=1;for(var i=vertices.length-1;i>0;i--){newVertices[j++]=this.vertices[i]}vertices=newVertices}};gpcas.geometry.Polygon.prototype.getVertexIndex=function(vertex){for(var i=0;i<this.vertices.length;i++){if(equals(vertices[i],vertex)){return i}}return-1};gpcas.geometry.Polygon.prototype.insertVertex=function(vertex1,vertex2,newVertex){var vertex1Index=getVertexIndex(vertex1);var vertex2Index=getVertexIndex(vertex2);if(vertex1Index==-1||vertex2Index==-1){return false}if(vertex2Index<vertex1Index){var i=vertex1Index;vertex1Index=vertex2Index;vertex2Index=i}if(vertex2Index==vertex1Index+1){var newVertices=[];for(var i=0;i<=vertex1Index;i++){newVertices[i]=this.vertices[i]}newVertices[vertex2Index]=newVertex;for(var i=vertex2Index;i<this.vertices.length;i++){newVertices[i+1]=this.vertices[i]}this.vertices=newVertices}else if(vertex2Index==vertices.length-1&&vertex1Index==0){this.vertices.push(newVertex)}return true};gpcas.geometry.Polygon.prototype.clone=function(){var res=new Polygon;res.vertices=vertices.slice(this.vertices.length-1);return res};gpcas.geometry.Polygon.prototype.toString=function(){var vertices=this.vertices;var res="[";for(var i=0;i<vertices.length;i++){var vertex=vertices[i];res+=(i>0?",":"")+"["+vertex.x+","+vertex.y+"]"}res+="]";return res};gpcas.geometry.PolygonNode=function(next,x,y){this.active;this.hole;this.v=[];this.next;this.proxy;var vn=new VertexNode(x,y);this.v[Clip.LEFT]=vn;this.v[Clip.RIGHT]=vn;this.next=next;this.proxy=this;this.active=1};gpcas.geometry.PolygonNode.prototype.add_right=function(x,y){var nv=new VertexNode(x,y);this.proxy.v[Clip.RIGHT].next=nv;this.proxy.v[Clip.RIGHT]=nv};gpcas.geometry.PolygonNode.prototype.add_left=function(x,y){var proxy=this.proxy;var nv=new VertexNode(x,y);nv.next=proxy.v[Clip.LEFT];proxy.v[Clip.LEFT]=nv};gpcas.geometry.PolySimple=function(){this.m_List=new gpcas.util.ArrayList;this.m_Contributes=true};gpcas.geometry.PolySimple.prototype.equals=function(obj){if(!(obj instanceof PolySimple)){return false}var that=obj;var this_num=this.m_List.size();var that_num=that.m_List.size();if(this_num!=that_num)return false;if(this_num>0){var this_x=this.getX(0);var this_y=this.getY(0);var that_first_index=-1;for(var that_index=0;that_first_index==-1&&that_index<that_num;that_index++){var that_x=that.getX(that_index);var that_y=that.getY(that_index);if(this_x==that_x&&this_y==that_y){that_first_index=that_index}}if(that_first_index==-1)return false;var that_index=that_first_index;for(var this_index=0;this_index<this_num;this_index++){this_x=this.getX(this_index);this_y=this.getY(this_index);var that_x=that.getX(that_index);var that_y=that.getY(that_index);if(this_x!=that_x||this_y!=that_y)return false;that_index++;if(that_index>=that_num){that_index=0}}}return true};gpcas.geometry.PolySimple.prototype.hashCode=function(){var result=17;result=37*result+this.m_List.hashCode();return result};gpcas.geometry.PolySimple.prototype.toString=function(){return"PolySimple: num_points="+getNumPoints()};gpcas.geometry.PolySimple.prototype.clear=function(){this.m_List.clear()};gpcas.geometry.PolySimple.prototype.add=function(arg0,arg1){var args=[];args[0]=arg0;if(undefined!==arg1){args[1]=arg1}if(args.length==2){this.addPointXY(args[0],args[1])}else if(args.length==1){if(args[0]instanceof Point){this.addPoint(args[0])}else if(args[0]instanceof Poly){this.addPoly(args[0])}else if(args[0]instanceof Array){for(var k=0;k<args[0].length;k++){var val=args[0][k];this.add(val)}}}};gpcas.geometry.PolySimple.prototype.addPointXY=function(x,y){this.addPoint(new Point(x,y))};gpcas.geometry.PolySimple.prototype.addPoint=function(p){this.m_List.add(p)};gpcas.geometry.PolySimple.prototype.addPoly=function(p){alert("Cannot add poly to a simple poly.")};gpcas.geometry.PolySimple.prototype.isEmpty=function(){return this.m_List.isEmpty()};gpcas.geometry.PolySimple.prototype.getBounds=function(){var xmin=Number.MAX_VALUE;var ymin=Number.MAX_VALUE;var xmax=-Number.MAX_VALUE;var ymax=-Number.MAX_VALUE;for(var i=0;i<this.m_List.size();i++){var x=this.getX(i);var y=this.getY(i);if(x<xmin)xmin=x;if(x>xmax)xmax=x;if(y<ymin)ymin=y;if(y>ymax)ymax=y}return new Rectangle(xmin,ymin,xmax-xmin,ymax-ymin)};gpcas.geometry.PolySimple.prototype.getInnerPoly=function(polyIndex){if(polyIndex!=0){alert("PolySimple only has one poly")}return this};gpcas.geometry.PolySimple.prototype.getNumInnerPoly=function(){return 1};gpcas.geometry.PolySimple.prototype.getNumPoints=function(){return this.m_List.size()};gpcas.geometry.PolySimple.prototype.getX=function(index){return this.m_List.get(index).x};gpcas.geometry.PolySimple.prototype.getY=function(index){return this.m_List.get(index).y};gpcas.geometry.PolySimple.prototype.getPoint=function(index){return this.m_List.get(index)};gpcas.geometry.PolySimple.prototype.getPoints=function(){return this.m_List.toArray()};gpcas.geometry.PolySimple.prototype.isPointInside=function(point){var points=this.getPoints();var j=points.length-1;var oddNodes=false;for(var i=0;i<points.length;i++){if(points[i].y<point.y&&points[j].y>=point.y||points[j].y<point.y&&points[i].y>=point.y){if(points[i].x+(point.y-points[i].y)/(points[j].y-points[i].y)*(points[j].x-points[i].x)<point.x){oddNodes=!oddNodes}}j=i}return oddNodes};gpcas.geometry.PolySimple.prototype.isHole=function(){return false};gpcas.geometry.PolySimple.prototype.setIsHole=function(isHole){alert("PolySimple cannot be a hole")};gpcas.geometry.PolySimple.prototype.isContributing=function(polyIndex){if(polyIndex!=0){alert("PolySimple only has one poly")}return this.m_Contributes};gpcas.geometry.PolySimple.prototype.setContributing=function(polyIndex,contributes){if(polyIndex!=0){alert("PolySimple only has one poly")}this.m_Contributes=contributes};gpcas.geometry.PolySimple.prototype.intersection=function(p){return Clip.intersection(this,p,"PolySimple")};gpcas.geometry.PolySimple.prototype.union=function(p){return Clip.union(this,p,"PolySimple")};gpcas.geometry.PolySimple.prototype.xor=function(p){return Clip.xor(p,this,"PolySimple")};gpcas.geometry.PolySimple.prototype.difference=function(p){return Clip.difference(p,this,"PolySimple")};gpcas.geometry.PolySimple.prototype.getArea=function(){if(this.getNumPoints()<3){return 0}var ax=this.getX(0);var ay=this.getY(0);var area=0;for(var i=1;i<this.getNumPoints()-1;i++){var bx=this.getX(i);var by=this.getY(i);var cx=this.getX(i+1);var cy=this.getY(i+1);var tarea=(cx-bx)*(ay-by)-(ax-bx)*(cy-by);area+=tarea}area=.5*Math.abs(area);return area};gpcas.geometry.Rectangle=function(_x,_y,_w,_h){this.x=_x;this.y=_y;this.w=_w;this.h=_h};gpcas.geometry.Rectangle.prototype.getMaxY=function(){return this.y+this.h};gpcas.geometry.Rectangle.prototype.getMinY=function(){return this.y};gpcas.geometry.Rectangle.prototype.getMaxX=function(){return this.x+this.w};gpcas.geometry.Rectangle.prototype.getMinX=function(){return this.x};gpcas.geometry.Rectangle.prototype.toString=function(){return"["+x.toString()+" "+y.toString()+" "+w.toString()+" "+h.toString()+"]"};gpcas.geometry.ScanBeamTree=function(yvalue){this.y=yvalue;this.less;this.more};gpcas.geometry.ScanBeamTreeEntries=function(){this.sbt_entries=0;this.sb_tree};gpcas.geometry.ScanBeamTreeEntries.prototype.build_sbt=function(){var sbt=[];var entries=0;entries=this.inner_build_sbt(entries,sbt,this.sb_tree);if(entries!=this.sbt_entries){}return sbt};gpcas.geometry.ScanBeamTreeEntries.prototype.inner_build_sbt=function(entries,sbt,sbt_node){if(sbt_node.less!=null){entries=this.inner_build_sbt(entries,sbt,sbt_node.less)}sbt[entries]=sbt_node.y;entries++;if(sbt_node.more!=null){entries=this.inner_build_sbt(entries,sbt,sbt_node.more)}return entries};gpcas.geometry.StNode=function(edge,prev){this.edge;this.xb;this.xt;this.dx;this.prev;this.edge=edge;this.xb=edge.xb;this.xt=edge.xt;this.dx=edge.dx;this.prev=prev};gpcas.geometry.TopPolygonNode=function(){this.top_node};gpcas.geometry.TopPolygonNode.prototype.add_local_min=function(x,y){var existing_min=this.top_node;this.top_node=new PolygonNode(existing_min,x,y);return this.top_node};gpcas.geometry.TopPolygonNode.prototype.merge_left=function(p,q){q.proxy.hole=true;var top_node=this.top_node;if(p.proxy!=q.proxy){p.proxy.v[Clip.RIGHT].next=q.proxy.v[Clip.LEFT];q.proxy.v[Clip.LEFT]=p.proxy.v[Clip.LEFT];var target=p.proxy;for(var node=top_node;node!=null;node=node.next){if(node.proxy==target){node.active=0;node.proxy=q.proxy}}}};gpcas.geometry.TopPolygonNode.prototype.merge_right=function(p,q){var top_node=this.top_node;q.proxy.hole=false;if(p.proxy!=q.proxy){q.proxy.v[Clip.RIGHT].next=p.proxy.v[Clip.LEFT];q.proxy.v[Clip.RIGHT]=p.proxy.v[Clip.RIGHT];var target=p.proxy;for(var node=top_node;node!=null;node=node.next){if(node.proxy==target){node.active=0;node.proxy=q.proxy}}}};gpcas.geometry.TopPolygonNode.prototype.count_contours=function(){var nc=0;for(var polygon=this.top_node;polygon!=null;polygon=polygon.next){if(polygon.active!=0){var nv=0;for(var v=polygon.proxy.v[Clip.LEFT];v!=null;v=v.next){nv++}if(nv>2){polygon.active=nv;nc++}else{polygon.active=0}}}return nc};gpcas.geometry.TopPolygonNode.prototype.getResult=function(polyClass){var top_node=this.top_node;var result=Clip.createNewPoly(polyClass);var num_contours=this.count_contours();if(num_contours>0){var c=0;var npoly_node=null;for(var poly_node=top_node;poly_node!=null;poly_node=npoly_node){npoly_node=poly_node.next;if(poly_node.active!=0){var poly=result;if(num_contours>1){poly=Clip.createNewPoly(polyClass)}if(poly_node.proxy.hole){poly.setIsHole(poly_node.proxy.hole)}for(var vtx=poly_node.proxy.v[Clip.LEFT];vtx!=null;vtx=vtx.next){poly.add(vtx.x,vtx.y)}if(num_contours>1){result.addPoly(poly)}c++}}var orig=result;result=Clip.createNewPoly(polyClass);for(var i=0;i<orig.getNumInnerPoly();i++){var inner=orig.getInnerPoly(i);if(!inner.isHole()){result.addPoly(inner)}}for(var i=0;i<orig.getNumInnerPoly();i++){var inner=orig.getInnerPoly(i);if(inner.isHole()){result.addPoly(inner)}}}return result};gpcas.geometry.TopPolygonNode.prototype.print=function(){var top_node=this.top_node;var c=0;var npoly_node=null;for(var poly_node=top_node;poly_node!=null;poly_node=npoly_node){npoly_node=poly_node.next;if(poly_node.active!=0){var v=0;for(var vtx=poly_node.proxy.v[Clip.LEFT];vtx!=null;vtx=vtx.next){}c++}}};gpcas.geometry.VertexNode=function(x,y){this.x;this.y;this.next;this.x=x;this.y=y;this.next=null};gpcas.geometry.VertexType=function(){};gpcas.geometry.VertexType.NUL=0;gpcas.geometry.VertexType.EMX=1;gpcas.geometry.VertexType.ELI=2;gpcas.geometry.VertexType.TED=3;gpcas.geometry.VertexType.ERI=4;gpcas.geometry.VertexType.RED=5;gpcas.geometry.VertexType.IMM=6;gpcas.geometry.VertexType.IMN=7;gpcas.geometry.VertexType.EMN=8;gpcas.geometry.VertexType.EMM=9;gpcas.geometry.VertexType.LED=10;gpcas.geometry.VertexType.ILI=11;gpcas.geometry.VertexType.BED=12;gpcas.geometry.VertexType.IRI=13;gpcas.geometry.VertexType.IMX=14;gpcas.geometry.VertexType.FUL=15;gpcas.geometry.VertexType.getType=function(tr,tl,br,bl){return tr+(tl<<1)+(br<<2)+(bl<<3)};gpcas.geometry.WeilerAtherton=function(){};var PolyDefault=gpcas.geometry.PolyDefault;var Clip=gpcas.geometry.Clip;var OperationType=gpcas.geometry.OperationType;var LmtTable=gpcas.geometry.LmtTable;var ScanBeamTreeEntries=gpcas.geometry.ScanBeamTreeEntries;var EdgeTable=gpcas.geometry.EdgeTable;var EdgeNode=gpcas.geometry.EdgeNode;var ScanBeamTree=gpcas.geometry.ScanBeamTree;var Rectangle=gpcas.geometry.Rectangle;var BundleState=gpcas.geometry.BundleState;var LmtNode=gpcas.geometry.LmtNode;var TopPolygonNode=gpcas.geometry.TopPolygonNode;var AetTree=gpcas.geometry.AetTree;var HState=gpcas.geometry.HState;var VertexType=gpcas.geometry.VertexType;var VertexNode=gpcas.geometry.VertexNode;var PolygonNode=gpcas.geometry.PolygonNode;var ItNodeTable=gpcas.geometry.ItNodeTable;var StNode=gpcas.geometry.StNode;var ItNode=gpcas.geometry.ItNode;gpcas.geometry.WeilerAtherton.prototype.merge=function(p1,p2){p1=p1.clone();p2=p2.clone()};gpcas.Point=Point;window.gpcas=gpcas})();